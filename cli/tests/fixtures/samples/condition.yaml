---
version:  1.1

kind: component

name: condition

tags: [samples]


run:
  kind: dag
  operations:
  - name: flip
    dagRef: flip_operation
  - name: heads
    dagRef: subdag_conditional
    params:
      low: {value: 10}
      high: {value: 19}
      limit: {value: 15}
    conditions:
    - param: "{{ flip.outputs.result }}"
      trigger: "heads"

    - name: heads
      dagRef: subdag_conditional
      params:
        low: {value: 0}
        high: {value: 9}
        limit: {value: 5}
      conditions:
      - param: "{{ flip.outputs.result }}"
        trigger: "tails"

  components:
    - name: random_operation
      inputs:
      - name: low
        type: int
      - name: high
        type: int
      outputs:
      - name: result
        type: int
      description: Generate random number
      run:
        kind: job
        container:
          image: "python:alpine3.6"
          command: ['sh', '-c']
          args: ['python -c "import random; from polyaxon.tracking import Run; Run().log_outputs(result=random.randint({{ low }}, {{ high }}))"']

    - name: flip_operation
      outputs:
      - name: result
        type: string
        options: ['heads', 'tails']
      description: Flip coin
      run:
        kind: job
        container:
          image: "python:alpine3.6"
          command: ['sh', '-c']
          args:
          - python -c "import random;  from polyaxon.tracking import Run; result = 'heads' if random.randint(0,1) == 0 else 'tails'; Run().log_outputs(result=result)"

    - name: print_operation
      inputs:
      - name: msg
        type: string
      description: Print a message
      run:
        kind: job
        container:
          image: "alpine:3.6"
          command: ['echo', msg]


    - name: subdag_conditional
      description: Conditional coin flip
      inputs:
      - name: low
        type: int
      - name: high
        type: int
      - name: limit
        type: int
      run:
        kind: dag
        operations:
        - name: random_number
          dagRef: random_operation
          params:
            low:
              ref: dag
              value: inputs.low
            high:
              ref: dag
              value: inputs.high

            - name: higher
              dagRef: print_operation
              params:
                msg: "op: {{ plx_contexts.op_name }} and result: {{ random_number.outputs.result }} > {{ dag.input.limit }}'"
              conditions:
              - param: "{{ random_number.outputs.result }}"
                trigger: ":> {{ dag.input.limit }}"

            - name: lower
              dagRef: print_operation
              params:
                msg: "op: {{ plx_contexts.op_name }} and result: {{ random_number.outputs.result }} < {{ dag.input.limit }}'"
              conditions:
              - param: "{{ random_number.outputs.result }}"
                trigger: ":< {{ dag.input.limit }}"

            - name: equal
              dagRef: print_operation
              params:
                msg: "op: {{ plx_contexts.op_name }} and result: {{ random_number.outputs.result }} === {{ dag.input.limit }}'"
              conditions:
              - param: "{{ random_number.outputs.result }}"
                trigger: ":< {{ dag.input.limit }}"
---
